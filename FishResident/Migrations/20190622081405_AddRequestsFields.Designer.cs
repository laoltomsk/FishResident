// <auto-generated />
using System;
using FishResident.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishResident.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190622081405_AddRequestsFields")]
    partial class AddRequestsFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.Property<string>("ResidentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("ResidentId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("FishResident.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CellPhone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contacts");

                    b.Property<string>("DirectOfficePhone");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("GeneralOfficePhone");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OfficePhoneExtension");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondaryEmail");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FeatureTypeId");

                    b.Property<Guid?>("LinkedFeatureId");

                    b.Property<Guid?>("ResidenceId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("LinkedFeatureId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("FeatureAllowedValues");

                    b.HasData(
                        new { Id = new Guid("1a3eed1b-8de0-420c-8879-9cb456ea0395"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "0" },
                        new { Id = new Guid("dda68521-1c7b-4e70-a639-c2879b0641ca"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "1" },
                        new { Id = new Guid("3d824a5f-4ac3-470f-8aff-24f5db9bb8c1"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "2" },
                        new { Id = new Guid("875cd17f-865b-4583-90ba-a88925d8cae3"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "3" },
                        new { Id = new Guid("f4892ec7-c4de-4e1e-866d-58ff681332b9"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "4" },
                        new { Id = new Guid("bbacc96f-9f66-4e9f-a59a-e1155104a8ed"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "5" },
                        new { Id = new Guid("a2b87ab1-4619-4f00-b703-7a883ede9d7b"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "6" },
                        new { Id = new Guid("3b7805ca-6814-41fc-9325-6abe1cd0a528"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "7" },
                        new { Id = new Guid("7d0d8daf-3293-43b5-be81-b8814f97bc39"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "8" },
                        new { Id = new Guid("5d925abf-e021-4e5d-81c9-a5b29f2ac925"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "9" },
                        new { Id = new Guid("5b78d585-6757-4363-81b9-9b2a81bf96d7"), FeatureTypeId = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Value = "10+" },
                        new { Id = new Guid("279ca448-528f-4c91-ae61-9f4010c2e83f"), FeatureTypeId = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Value = "0" },
                        new { Id = new Guid("d58833c4-c4b6-4d62-b143-583396765263"), FeatureTypeId = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Value = "1" },
                        new { Id = new Guid("f7ca04bd-0a6f-4cae-aa54-5e073db04bc8"), FeatureTypeId = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Value = "2" },
                        new { Id = new Guid("ef6d5467-8133-49e5-9aca-547cf142abab"), FeatureTypeId = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Value = "3" },
                        new { Id = new Guid("7d96eb85-9037-428f-a9e2-6589fe02b58b"), FeatureTypeId = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Value = "4" },
                        new { Id = new Guid("5c37d155-e8f8-4b6f-80d1-b6529988956c"), FeatureTypeId = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Value = "5+" },
                        new { Id = new Guid("3e03e1f6-2b41-499f-a919-84eadead6b2e"), FeatureTypeId = new Guid("1f3c32b1-86eb-4c9b-9ecc-8ce460440fa2"), Value = "Small" },
                        new { Id = new Guid("5fc17c2c-1410-47be-b122-4869793f2037"), FeatureTypeId = new Guid("1f3c32b1-86eb-4c9b-9ecc-8ce460440fa2"), Value = "Medium" },
                        new { Id = new Guid("ce73a836-7b8a-4d16-95f8-e9954d06c585"), FeatureTypeId = new Guid("1f3c32b1-86eb-4c9b-9ecc-8ce460440fa2"), Value = "Large" },
                        new { Id = new Guid("a98f3188-a489-4e81-93c6-6d774b5c46b4"), FeatureTypeId = new Guid("384447d4-fdc1-4ab2-8820-41e588cd545e"), Value = "Yes" },
                        new { Id = new Guid("33e71c1a-c365-48e7-907e-5756ba6fe63c"), FeatureTypeId = new Guid("384447d4-fdc1-4ab2-8820-41e588cd545e"), Value = "No" },
                        new { Id = new Guid("ea72cbce-4c25-437e-8094-92acc4116e83"), FeatureTypeId = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Value = "0" },
                        new { Id = new Guid("b03f8c24-c72c-4898-b771-6632026197e8"), FeatureTypeId = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Value = "1" },
                        new { Id = new Guid("a4f75364-a114-473c-99c8-b1167d52bc0b"), FeatureTypeId = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Value = "2" },
                        new { Id = new Guid("b8fae4b4-d6ff-4727-9ce0-6994debf5e4e"), FeatureTypeId = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Value = "3" },
                        new { Id = new Guid("4cf2c6c1-2140-4017-b1e5-e4df7c7c8333"), FeatureTypeId = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Value = "4" },
                        new { Id = new Guid("d18e425a-c66c-40e7-b607-a52852eb8a03"), FeatureTypeId = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Value = "5+" },
                        new { Id = new Guid("272eac0c-ab3a-4d90-b809-840bef29ed3b"), FeatureTypeId = new Guid("b9977e60-b891-4a28-8e86-c2b0753a4120"), Value = "Yes" },
                        new { Id = new Guid("47cfcd31-ddb4-4533-8309-43c1ef782ef0"), FeatureTypeId = new Guid("b9977e60-b891-4a28-8e86-c2b0753a4120"), Value = "No" },
                        new { Id = new Guid("ee4fbc94-f14b-4445-a7ce-f529482cb41c"), FeatureTypeId = new Guid("5dfacc0d-8f57-46e3-bec2-8371c5fc079c"), Value = "Yes" },
                        new { Id = new Guid("e2a3d024-9d36-42f4-a2f9-79d990fb4c70"), FeatureTypeId = new Guid("5dfacc0d-8f57-46e3-bec2-8371c5fc079c"), Value = "No" },
                        new { Id = new Guid("3935cbab-c796-4849-910e-d5e6e50416dd"), FeatureTypeId = new Guid("4cbb9766-0bbe-43a7-8bc3-a31f988a81aa"), Value = "Balcony" },
                        new { Id = new Guid("b4ce4752-9a4e-438b-82bc-02ffc92b5b90"), FeatureTypeId = new Guid("4cbb9766-0bbe-43a7-8bc3-a31f988a81aa"), Value = "Patio" },
                        new { Id = new Guid("ad69ab59-d72c-459b-912a-cf9a45e32a8a"), FeatureTypeId = new Guid("4cbb9766-0bbe-43a7-8bc3-a31f988a81aa"), Value = "Deck" },
                        new { Id = new Guid("08ae57c7-e67c-4c10-8755-2bfe84cdc138"), FeatureTypeId = new Guid("73b72021-572c-4ba5-8a17-255ff631ccaf"), Value = "Yes" },
                        new { Id = new Guid("4a1cebac-fb0a-4a1e-b1dd-b57484888cfc"), FeatureTypeId = new Guid("73b72021-572c-4ba5-8a17-255ff631ccaf"), Value = "No" },
                        new { Id = new Guid("72cc1413-049f-4761-b54d-187a53af8f7a"), FeatureTypeId = new Guid("5df51310-d4ca-4333-857a-eff90a1d7f47"), Value = "Yes" },
                        new { Id = new Guid("3f6c7aa6-e04f-4cfa-bbbc-e663ed146d4d"), FeatureTypeId = new Guid("5df51310-d4ca-4333-857a-eff90a1d7f47"), Value = "No" },
                        new { Id = new Guid("fcd0aabc-b875-46e3-b83a-d235dde6fa56"), FeatureTypeId = new Guid("df7df92d-977d-4726-81d2-ac750d03c745"), Value = "Yes" },
                        new { Id = new Guid("51d58941-a86a-408f-b2ee-f838da1672bf"), FeatureTypeId = new Guid("df7df92d-977d-4726-81d2-ac750d03c745"), Value = "No" },
                        new { Id = new Guid("a249b79a-3148-4e21-b87d-ef416c9092b4"), FeatureTypeId = new Guid("0e421938-e72f-4ebf-aacf-4d42e46d5b0a"), Value = "Yes" },
                        new { Id = new Guid("17cf16e6-5c82-4db8-a47d-d916aec3a10c"), FeatureTypeId = new Guid("0e421938-e72f-4ebf-aacf-4d42e46d5b0a"), Value = "No" },
                        new { Id = new Guid("25b609a8-ef01-4def-81ca-a4e2b6969db5"), FeatureTypeId = new Guid("d86d2cdd-310c-4af0-8425-fbd54e9a4f22"), Value = "Yes" },
                        new { Id = new Guid("7e9a63c1-d3bb-46e8-ae75-7b7ac6b1f1ba"), FeatureTypeId = new Guid("d86d2cdd-310c-4af0-8425-fbd54e9a4f22"), Value = "No" },
                        new { Id = new Guid("d748c7dd-bc28-4109-8a39-4a36777d07bb"), FeatureTypeId = new Guid("3a4970a0-fc7f-439f-bed0-1d0632f4bebc"), Value = "Some" },
                        new { Id = new Guid("348e2fd7-20a4-474c-8af9-acee88d114bc"), FeatureTypeId = new Guid("3a4970a0-fc7f-439f-bed0-1d0632f4bebc"), Value = "All" },
                        new { Id = new Guid("90f7d465-9926-4440-aa75-06404446c8cf"), FeatureTypeId = new Guid("b80edb84-1489-4fe9-96dd-711d84b75562"), Value = "Yes" },
                        new { Id = new Guid("78b746bc-1036-4a40-8854-1e542dcea92a"), FeatureTypeId = new Guid("b80edb84-1489-4fe9-96dd-711d84b75562"), Value = "No" },
                        new { Id = new Guid("a550490f-9199-4081-9007-a30e0b9a0958"), FeatureTypeId = new Guid("8e05226c-9965-4991-bedf-66f089d39fe9"), Value = "Yes" },
                        new { Id = new Guid("4748bcaa-c652-4a35-98fc-3d1dd9be1283"), FeatureTypeId = new Guid("8e05226c-9965-4991-bedf-66f089d39fe9"), Value = "No" },
                        new { Id = new Guid("52a83347-75fa-47dc-8e38-de82df54443f"), FeatureTypeId = new Guid("c2cb10b3-7266-44bc-8f19-e42620e750d0"), Value = "Yes" },
                        new { Id = new Guid("04493387-ade3-4b9a-b2b8-1a29ab3237fc"), FeatureTypeId = new Guid("c2cb10b3-7266-44bc-8f19-e42620e750d0"), Value = "No" },
                        new { Id = new Guid("2396578d-9184-419c-bbf1-c83a5d4d434e"), FeatureTypeId = new Guid("2b74e2fc-a2f1-4e57-9c42-ca85bbed9fd0"), Value = "Yes" },
                        new { Id = new Guid("d9a39adc-ccf8-498f-97dd-200e9bc8f4b6"), FeatureTypeId = new Guid("2b74e2fc-a2f1-4e57-9c42-ca85bbed9fd0"), Value = "No" },
                        new { Id = new Guid("07c299e9-9851-4b19-baa3-9a805db8262a"), FeatureTypeId = new Guid("555f6b4b-3277-41bb-bdfe-f319c61605ba"), Value = "Yes" },
                        new { Id = new Guid("98a1594b-4c8a-40eb-bc47-0e611bd1ce2f"), FeatureTypeId = new Guid("555f6b4b-3277-41bb-bdfe-f319c61605ba"), Value = "No" },
                        new { Id = new Guid("40689acc-65af-4f9f-b577-51af9dc74fd5"), FeatureTypeId = new Guid("3c6dd0bc-005c-4d3f-82e7-70e1028bf925"), Value = "Yes" },
                        new { Id = new Guid("55558efb-7043-4368-8fb9-0e2306ca0292"), FeatureTypeId = new Guid("3c6dd0bc-005c-4d3f-82e7-70e1028bf925"), Value = "No" },
                        new { Id = new Guid("75c32913-9867-4eea-8179-8ac609c22cf8"), FeatureTypeId = new Guid("db7e9f8b-4d15-4a6c-8021-d624c763fd79"), Value = "Yes" },
                        new { Id = new Guid("9c53a2dd-88bb-46ac-b3e4-5a2d72f7c116"), FeatureTypeId = new Guid("db7e9f8b-4d15-4a6c-8021-d624c763fd79"), Value = "No" },
                        new { Id = new Guid("256b7d58-354d-4a8a-b365-71cbc5bb32b7"), FeatureTypeId = new Guid("b3224ee5-cb77-410c-ab1b-0f42dbb059ba"), Value = "Yes" },
                        new { Id = new Guid("386bca01-ee4f-410d-b255-fc9d5f3139fa"), FeatureTypeId = new Guid("b3224ee5-cb77-410c-ab1b-0f42dbb059ba"), Value = "No" },
                        new { Id = new Guid("72217cb8-8873-4d4f-918a-34a4e6b16f8f"), FeatureTypeId = new Guid("5586cda9-4979-474a-ad6c-8e9ad758a74a"), Value = "Yes" },
                        new { Id = new Guid("5c9604d6-4657-41fd-89ae-cefc37b5d50c"), FeatureTypeId = new Guid("5586cda9-4979-474a-ad6c-8e9ad758a74a"), Value = "No" },
                        new { Id = new Guid("5cda9bcd-eeb5-40b6-b04c-f77519f93a59"), FeatureTypeId = new Guid("08062888-a8b0-4108-82ee-30c9c1981ac8"), Value = "Yes" },
                        new { Id = new Guid("35670b86-34aa-4e06-96ac-35ef89609ced"), FeatureTypeId = new Guid("08062888-a8b0-4108-82ee-30c9c1981ac8"), Value = "No" },
                        new { Id = new Guid("f3302c31-cba9-4297-bab2-e15c1b552476"), FeatureTypeId = new Guid("f34a379b-c6b2-4949-8985-7a2e65592754"), Value = "Yes" },
                        new { Id = new Guid("edf952a9-cd87-42a9-a449-a6c653963464"), FeatureTypeId = new Guid("f34a379b-c6b2-4949-8985-7a2e65592754"), Value = "No" },
                        new { Id = new Guid("2caaa816-07d6-458c-99b7-acd0c84d1140"), FeatureTypeId = new Guid("0638dde9-b18d-4b4c-b7e0-b815c64bb4b5"), Value = "Yes" },
                        new { Id = new Guid("908331f5-8c14-407e-b675-3673d73b88b7"), FeatureTypeId = new Guid("0638dde9-b18d-4b4c-b7e0-b815c64bb4b5"), Value = "No" },
                        new { Id = new Guid("2e52be77-cf94-430a-887a-bad348423572"), FeatureTypeId = new Guid("b227827e-2507-4b42-946c-dd064fd81336"), Value = "Downtown" },
                        new { Id = new Guid("2f6d3e45-ea49-4f6d-bb7a-c8fc0153b551"), FeatureTypeId = new Guid("b227827e-2507-4b42-946c-dd064fd81336"), Value = "Uptown" },
                        new { Id = new Guid("2b45eea0-aeea-424b-8de3-9a363189f417"), FeatureTypeId = new Guid("b227827e-2507-4b42-946c-dd064fd81336"), Value = "Rural" },
                        new { Id = new Guid("6d271bca-733f-4930-82fd-24dd4ed3580e"), FeatureTypeId = new Guid("b227827e-2507-4b42-946c-dd064fd81336"), Value = "Suburban" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<Guid>("SearchRequestId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("FeatureRequests");
                });

            modelBuilder.Entity("FishResident.Models.FeatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.HasData(
                        new { Id = new Guid("bdbe3111-b58e-4f45-bb47-c1c0d4716d19"), Name = "Number of Bedrooms" },
                        new { Id = new Guid("c6b6310b-5d50-4fee-8844-ecce46803fff"), Name = "Number of Bathrooms" },
                        new { Id = new Guid("1f3c32b1-86eb-4c9b-9ecc-8ce460440fa2"), Name = "Kitchen size" },
                        new { Id = new Guid("384447d4-fdc1-4ab2-8820-41e588cd545e"), Name = "Garage" },
                        new { Id = new Guid("bf90a050-4b7d-46e6-be1d-c6a13e0ff7d7"), Name = "Number of Auto Spaces" },
                        new { Id = new Guid("b9977e60-b891-4a28-8e86-c2b0753a4120"), Name = "Pets Allowed" },
                        new { Id = new Guid("5dfacc0d-8f57-46e3-bec2-8371c5fc079c"), Name = "Air Conditioning" },
                        new { Id = new Guid("4cbb9766-0bbe-43a7-8bc3-a31f988a81aa"), Name = "Balcony Type" },
                        new { Id = new Guid("73b72021-572c-4ba5-8a17-255ff631ccaf"), Name = "Cable Ready" },
                        new { Id = new Guid("5df51310-d4ca-4333-857a-eff90a1d7f47"), Name = "Dishwasher" },
                        new { Id = new Guid("df7df92d-977d-4726-81d2-ac750d03c745"), Name = "Microwave Included" },
                        new { Id = new Guid("0e421938-e72f-4ebf-aacf-4d42e46d5b0a"), Name = "Handicap Accessible" },
                        new { Id = new Guid("d86d2cdd-310c-4af0-8425-fbd54e9a4f22"), Name = "Hardwood Floors" },
                        new { Id = new Guid("3a4970a0-fc7f-439f-bed0-1d0632f4bebc"), Name = "Utilities Covered" },
                        new { Id = new Guid("b80edb84-1489-4fe9-96dd-711d84b75562"), Name = "Walk-In Closets" },
                        new { Id = new Guid("8e05226c-9965-4991-bedf-66f089d39fe9"), Name = "Washer/Dryer Included" },
                        new { Id = new Guid("c2cb10b3-7266-44bc-8f19-e42620e750d0"), Name = "Security System" },
                        new { Id = new Guid("2b74e2fc-a2f1-4e57-9c42-ca85bbed9fd0"), Name = "Limited/Controlled Access" },
                        new { Id = new Guid("555f6b4b-3277-41bb-bdfe-f319c61605ba"), Name = "Elevator" },
                        new { Id = new Guid("3c6dd0bc-005c-4d3f-82e7-70e1028bf925"), Name = "Extra Storage" },
                        new { Id = new Guid("db7e9f8b-4d15-4a6c-8021-d624c763fd79"), Name = "Fitness Center Nearby" },
                        new { Id = new Guid("b3224ee5-cb77-410c-ab1b-0f42dbb059ba"), Name = "Business Center Nearby" },
                        new { Id = new Guid("5586cda9-4979-474a-ad6c-8e9ad758a74a"), Name = "Laundry Facility Nearby" },
                        new { Id = new Guid("08062888-a8b0-4108-82ee-30c9c1981ac8"), Name = "Pool Nearby" },
                        new { Id = new Guid("f34a379b-c6b2-4949-8985-7a2e65592754"), Name = "Park Nearby" },
                        new { Id = new Guid("0638dde9-b18d-4b4c-b7e0-b815c64bb4b5"), Name = "Senior Living" },
                        new { Id = new Guid("b227827e-2507-4b42-946c-dd064fd81336"), Name = "Neighbourhood Type" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid?>("SearchRequestId");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SearchRequestId");

                    b.HasIndex("TypeId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.ToTable("ResidencePhotos");
                });

            modelBuilder.Entity("FishResident.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ResidenceTypes");
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequests");
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.Property<string>("TimePeriod");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("AgreementsOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Agreements")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser", "Resident")
                        .WithMany("AgreementsResident")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId");

                    b.HasOne("FishResident.Models.Feature", "LinkedFeature")
                        .WithMany()
                        .HasForeignKey("LinkedFeatureId");

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Features")
                        .HasForeignKey("ResidenceId");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany("AllowedValues")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest", "SearchRequest")
                        .WithMany("FeatureRequests")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("Residences")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest")
                        .WithMany("Results")
                        .HasForeignKey("SearchRequestId");

                    b.HasOne("FishResident.Models.ResidenceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("ResidencePhotos")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
