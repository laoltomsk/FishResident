// <auto-generated />
using System;
using FishResident.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishResident.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190605113815_SeedFeatures")]
    partial class SeedFeatures
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.Property<string>("ResidentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("ResidentId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("FishResident.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CellPhone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contacts");

                    b.Property<string>("DirectOfficePhone");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("GeneralOfficePhone");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OfficePhoneExtension");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondaryEmail");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FeatureTypeId");

                    b.Property<Guid?>("LinkedFeatureId");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("LinkedFeatureId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("FeatureAllowedValues");

                    b.HasData(
                        new { Id = new Guid("14682791-6e10-4599-8774-d2e81529137b"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "0" },
                        new { Id = new Guid("1af08858-b2fb-464a-aa8b-c4f9875d9d7d"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "1" },
                        new { Id = new Guid("7657d9ad-e36b-4db5-8c69-1bd0a28de498"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "2" },
                        new { Id = new Guid("6a6d268d-95a4-4c76-b1ab-fa22ec729eef"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "3" },
                        new { Id = new Guid("0d848b79-0198-4270-b233-f3f825ecc3a6"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "4" },
                        new { Id = new Guid("d8c78e56-adcd-45ee-ad2d-02ab493286b6"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "5" },
                        new { Id = new Guid("354b4ea4-b2f1-4d36-915d-a0c305e494f8"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "6" },
                        new { Id = new Guid("42529dbe-3bd0-4445-b753-7e9cdd1d132f"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "7" },
                        new { Id = new Guid("ee24c21b-2623-49cb-8677-0e28736faee9"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "8" },
                        new { Id = new Guid("b82bf523-b5c6-49b0-a8a7-d177817e1565"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "9" },
                        new { Id = new Guid("8418e691-0b88-49ae-97b4-6664f03e779f"), FeatureTypeId = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Value = "10+" },
                        new { Id = new Guid("30b077ef-bdc9-48f0-828d-b2b269c997a1"), FeatureTypeId = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Value = "0" },
                        new { Id = new Guid("fa4b98e1-ff02-42d3-9aa2-e9484c80c3c5"), FeatureTypeId = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Value = "1" },
                        new { Id = new Guid("deb88c6e-c749-4c15-a093-8bb4734dcc40"), FeatureTypeId = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Value = "2" },
                        new { Id = new Guid("ad9ae204-8f41-441b-942f-2b1e15dbf0ac"), FeatureTypeId = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Value = "3" },
                        new { Id = new Guid("3868e4c6-1020-4af4-9e5e-66cd71df1bf7"), FeatureTypeId = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Value = "4" },
                        new { Id = new Guid("1d043bf8-b50c-4559-9aa1-930c7d35d837"), FeatureTypeId = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Value = "5+" },
                        new { Id = new Guid("8f2c1445-8500-4727-95be-9b0835228a9a"), FeatureTypeId = new Guid("efdab8f3-ff91-4fed-9115-69f04f699f02"), Value = "Small" },
                        new { Id = new Guid("5de2e927-6030-4c01-9bff-dcea97bded22"), FeatureTypeId = new Guid("efdab8f3-ff91-4fed-9115-69f04f699f02"), Value = "Medium" },
                        new { Id = new Guid("de892f39-b8fd-42bd-97dc-6f51392f94d3"), FeatureTypeId = new Guid("efdab8f3-ff91-4fed-9115-69f04f699f02"), Value = "Large" },
                        new { Id = new Guid("052470a7-9a0c-4d2e-a019-dccd59bff04c"), FeatureTypeId = new Guid("8254aff4-912b-4fcc-8512-855fbd2449e9"), Value = "Yes" },
                        new { Id = new Guid("905a0f09-d0a3-46b2-8266-97b02aca6d73"), FeatureTypeId = new Guid("8254aff4-912b-4fcc-8512-855fbd2449e9"), Value = "No" },
                        new { Id = new Guid("c352da93-fee0-4947-a6d4-1a9a66cf05ee"), FeatureTypeId = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Value = "0" },
                        new { Id = new Guid("1068ea7d-bc93-49c4-8481-37ea39b89bd8"), FeatureTypeId = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Value = "1" },
                        new { Id = new Guid("14b151c1-7441-41f2-9d8d-4660dcac0fd9"), FeatureTypeId = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Value = "2" },
                        new { Id = new Guid("fb5e296f-6c35-45d7-8370-3b0beeabbc1a"), FeatureTypeId = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Value = "3" },
                        new { Id = new Guid("c8a727c8-f847-43ab-b2cb-0b32c0d0a2be"), FeatureTypeId = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Value = "4" },
                        new { Id = new Guid("d21b366e-9001-4cf2-a9e8-c1d046be1182"), FeatureTypeId = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Value = "5+" },
                        new { Id = new Guid("ecec7aea-bffa-4520-90a3-0cee822ee263"), FeatureTypeId = new Guid("18a584f2-21fd-44e8-a53c-de29ebf1ed09"), Value = "Yes" },
                        new { Id = new Guid("7602a41b-b811-4f81-9d3c-66a653955ba8"), FeatureTypeId = new Guid("18a584f2-21fd-44e8-a53c-de29ebf1ed09"), Value = "No" },
                        new { Id = new Guid("d7d026dc-a338-4a5d-ad75-f7a57bbf3efa"), FeatureTypeId = new Guid("7831ede4-2635-4ab1-b796-6eb664a3bac4"), Value = "Yes" },
                        new { Id = new Guid("1516bc8d-b5de-41f6-9d23-6b48ce54526e"), FeatureTypeId = new Guid("7831ede4-2635-4ab1-b796-6eb664a3bac4"), Value = "No" },
                        new { Id = new Guid("d9e22588-b640-4f49-aa03-4c648f02851b"), FeatureTypeId = new Guid("9b689a2e-0e25-436b-bc12-517a2c6a05f7"), Value = "Balcony" },
                        new { Id = new Guid("f3dfcfcb-ed0c-4918-a74a-ef2d6c28ebca"), FeatureTypeId = new Guid("9b689a2e-0e25-436b-bc12-517a2c6a05f7"), Value = "Patio" },
                        new { Id = new Guid("fa52f846-24e5-46b2-b4f3-2405c2d2a224"), FeatureTypeId = new Guid("9b689a2e-0e25-436b-bc12-517a2c6a05f7"), Value = "Deck" },
                        new { Id = new Guid("98462f7c-bc11-410d-b6ae-54aee7196ae9"), FeatureTypeId = new Guid("bf1a0fb1-f04a-4c87-ad5c-c0fa1e77c9a6"), Value = "Yes" },
                        new { Id = new Guid("c5b8c6fe-d076-46b2-bfa6-45687142b498"), FeatureTypeId = new Guid("bf1a0fb1-f04a-4c87-ad5c-c0fa1e77c9a6"), Value = "No" },
                        new { Id = new Guid("136e7004-389f-43bd-9b7d-226a893516b2"), FeatureTypeId = new Guid("e8f29d92-d800-477a-913d-f39ae7f77735"), Value = "Yes" },
                        new { Id = new Guid("f44fa2dc-f0e4-4b3e-83de-d8250ccfd786"), FeatureTypeId = new Guid("e8f29d92-d800-477a-913d-f39ae7f77735"), Value = "No" },
                        new { Id = new Guid("12185a27-a3da-4474-99e3-ec37575dc1c5"), FeatureTypeId = new Guid("b3acfa2f-7481-4afd-b099-9f8f8cd6a1fb"), Value = "Yes" },
                        new { Id = new Guid("6eff0927-36db-422a-987e-6c6367e0f7f3"), FeatureTypeId = new Guid("b3acfa2f-7481-4afd-b099-9f8f8cd6a1fb"), Value = "No" },
                        new { Id = new Guid("d49771b4-57fc-43cd-8e1b-5eb8c1e6b4a4"), FeatureTypeId = new Guid("fad30160-75db-4c16-8288-ea0b4cc67af8"), Value = "Yes" },
                        new { Id = new Guid("5cca763e-7b7a-4120-8658-93f9b2594f5f"), FeatureTypeId = new Guid("fad30160-75db-4c16-8288-ea0b4cc67af8"), Value = "No" },
                        new { Id = new Guid("210c14ed-0fdf-44a3-adda-0e5d0bf00f98"), FeatureTypeId = new Guid("04c7f6b8-4302-44e5-983b-badc105b89e9"), Value = "Yes" },
                        new { Id = new Guid("dfa3548d-2150-4f72-8a4c-be426a7d4977"), FeatureTypeId = new Guid("04c7f6b8-4302-44e5-983b-badc105b89e9"), Value = "No" },
                        new { Id = new Guid("57b1be3e-747f-4256-88d5-8b251f6fa996"), FeatureTypeId = new Guid("12df7757-f094-4c62-8007-3fc5b9c0e708"), Value = "Some" },
                        new { Id = new Guid("b9a7f8d2-a143-4e1b-b84e-cc4f86652e03"), FeatureTypeId = new Guid("12df7757-f094-4c62-8007-3fc5b9c0e708"), Value = "All" },
                        new { Id = new Guid("076c14ed-0f6c-4e0b-9061-883bc2bda1a7"), FeatureTypeId = new Guid("1c31d417-8d3d-45b4-b873-ccfa68e01337"), Value = "Yes" },
                        new { Id = new Guid("8bbf7b52-a166-4c01-af61-83bdae61c234"), FeatureTypeId = new Guid("1c31d417-8d3d-45b4-b873-ccfa68e01337"), Value = "No" },
                        new { Id = new Guid("293e6c41-aa79-48c4-8425-3ca16dedf6f3"), FeatureTypeId = new Guid("8c4d9182-b6c3-477e-8d96-b72d2f1faa76"), Value = "Yes" },
                        new { Id = new Guid("b3e6d660-1bc6-4b6f-b887-443c94ab6ceb"), FeatureTypeId = new Guid("8c4d9182-b6c3-477e-8d96-b72d2f1faa76"), Value = "No" },
                        new { Id = new Guid("4d3421a0-234d-4682-ae7e-7ebee824e494"), FeatureTypeId = new Guid("6a07d58f-5923-444f-81d6-551aee735b95"), Value = "Yes" },
                        new { Id = new Guid("4288f791-9d4c-4bf2-98e4-3d6413407426"), FeatureTypeId = new Guid("6a07d58f-5923-444f-81d6-551aee735b95"), Value = "No" },
                        new { Id = new Guid("dfa9f131-db2a-442e-a8de-4f81011a6aca"), FeatureTypeId = new Guid("019c22d7-245f-42e2-acdd-3e9c10b35f20"), Value = "Yes" },
                        new { Id = new Guid("c7b40a26-625b-4077-9a24-45eba2effdb2"), FeatureTypeId = new Guid("019c22d7-245f-42e2-acdd-3e9c10b35f20"), Value = "No" },
                        new { Id = new Guid("36e2cff5-2079-42e2-8d33-42b0a27c45f3"), FeatureTypeId = new Guid("b82be4d7-5c32-406f-a6d7-18fdcf9f8957"), Value = "Yes" },
                        new { Id = new Guid("3c96fa3e-9394-471d-90a2-5ca8208aa5cc"), FeatureTypeId = new Guid("b82be4d7-5c32-406f-a6d7-18fdcf9f8957"), Value = "No" },
                        new { Id = new Guid("f893303a-a3d7-45fd-b0ad-b0fdc220725a"), FeatureTypeId = new Guid("161e328d-9113-4660-92dc-ec33d611fb5e"), Value = "Yes" },
                        new { Id = new Guid("e5b56077-5b78-42e9-9226-cf68a5c42390"), FeatureTypeId = new Guid("161e328d-9113-4660-92dc-ec33d611fb5e"), Value = "No" },
                        new { Id = new Guid("93b2be0c-9676-4cbe-83cf-8c448f1e918d"), FeatureTypeId = new Guid("860d740f-3601-4cf0-809e-aefc29590384"), Value = "Yes" },
                        new { Id = new Guid("4a67e12d-71e2-48ea-b72d-ec56c4a4a435"), FeatureTypeId = new Guid("860d740f-3601-4cf0-809e-aefc29590384"), Value = "No" },
                        new { Id = new Guid("d4ae204e-a8c1-4570-8e0f-8f1f9b42d53c"), FeatureTypeId = new Guid("df66f8f8-fd1a-4ad9-988e-7b07f4d1b3fc"), Value = "Yes" },
                        new { Id = new Guid("8b1c00c6-cbaa-4e1f-8173-788bcd6375aa"), FeatureTypeId = new Guid("df66f8f8-fd1a-4ad9-988e-7b07f4d1b3fc"), Value = "No" },
                        new { Id = new Guid("a24b993a-7a98-420f-b43d-1cf567b6c4bf"), FeatureTypeId = new Guid("9d820672-fba8-48cd-8809-a6504208cd93"), Value = "Yes" },
                        new { Id = new Guid("b630cc57-575c-4408-938c-d48c1503eab8"), FeatureTypeId = new Guid("9d820672-fba8-48cd-8809-a6504208cd93"), Value = "No" },
                        new { Id = new Guid("1140e74f-fa7e-4fac-9ff4-dda2b3fe1606"), FeatureTypeId = new Guid("96523902-8bec-43e1-b06f-46928c1cb7c3"), Value = "Yes" },
                        new { Id = new Guid("fa229a20-4ace-47c3-9b51-1eb4697df75b"), FeatureTypeId = new Guid("96523902-8bec-43e1-b06f-46928c1cb7c3"), Value = "No" },
                        new { Id = new Guid("aa3a9473-df57-4734-a84b-bcd2aafcc877"), FeatureTypeId = new Guid("2e249ddf-6480-48f0-a2af-d006b63c0820"), Value = "Yes" },
                        new { Id = new Guid("b1b24e14-0c08-4606-91f2-45b3367f6484"), FeatureTypeId = new Guid("2e249ddf-6480-48f0-a2af-d006b63c0820"), Value = "No" },
                        new { Id = new Guid("12d52f05-9f30-4cee-b3e6-1619cbdc0bda"), FeatureTypeId = new Guid("2a862dab-b3f4-46aa-b530-523700b71dc8"), Value = "Yes" },
                        new { Id = new Guid("92c6ab7a-f451-4133-b145-74f4d7eede24"), FeatureTypeId = new Guid("2a862dab-b3f4-46aa-b530-523700b71dc8"), Value = "No" },
                        new { Id = new Guid("b0813ce8-bdce-4152-a7d2-bb34b75a5d1a"), FeatureTypeId = new Guid("86803789-aea0-4891-9f4e-05e3d9d49c2f"), Value = "Downtown" },
                        new { Id = new Guid("38915eb4-0812-46c9-a7bb-1df0760eac73"), FeatureTypeId = new Guid("86803789-aea0-4891-9f4e-05e3d9d49c2f"), Value = "Uptown" },
                        new { Id = new Guid("f039ea52-1529-4f71-bf66-70f65be77331"), FeatureTypeId = new Guid("86803789-aea0-4891-9f4e-05e3d9d49c2f"), Value = "Rural" },
                        new { Id = new Guid("4be6e53a-b0fb-4aa2-a39b-71464b50bc7e"), FeatureTypeId = new Guid("86803789-aea0-4891-9f4e-05e3d9d49c2f"), Value = "Suburban" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<Guid>("SearchRequestId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("FeatureRequests");
                });

            modelBuilder.Entity("FishResident.Models.FeatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.HasData(
                        new { Id = new Guid("be07edf3-18a7-4ffa-98af-43cedc5f11bf"), Name = "Number of Bedrooms" },
                        new { Id = new Guid("b4e5eecc-dd95-4bf1-a672-35013cce2cd9"), Name = "Number of Bathrooms" },
                        new { Id = new Guid("efdab8f3-ff91-4fed-9115-69f04f699f02"), Name = "Kitchen size" },
                        new { Id = new Guid("8254aff4-912b-4fcc-8512-855fbd2449e9"), Name = "Garage" },
                        new { Id = new Guid("cd1d2594-bdbb-40db-a1b6-2f0ece6c1ed6"), Name = "Number of Auto Spaces" },
                        new { Id = new Guid("18a584f2-21fd-44e8-a53c-de29ebf1ed09"), Name = "Pets Allowed" },
                        new { Id = new Guid("7831ede4-2635-4ab1-b796-6eb664a3bac4"), Name = "Air Conditioning" },
                        new { Id = new Guid("9b689a2e-0e25-436b-bc12-517a2c6a05f7"), Name = "Balcony Type" },
                        new { Id = new Guid("bf1a0fb1-f04a-4c87-ad5c-c0fa1e77c9a6"), Name = "Cable Ready" },
                        new { Id = new Guid("e8f29d92-d800-477a-913d-f39ae7f77735"), Name = "Dishwasher" },
                        new { Id = new Guid("b3acfa2f-7481-4afd-b099-9f8f8cd6a1fb"), Name = "Microwave Included" },
                        new { Id = new Guid("fad30160-75db-4c16-8288-ea0b4cc67af8"), Name = "Handicap Accessible" },
                        new { Id = new Guid("04c7f6b8-4302-44e5-983b-badc105b89e9"), Name = "Hardwood Floors" },
                        new { Id = new Guid("12df7757-f094-4c62-8007-3fc5b9c0e708"), Name = "Utilities Covered" },
                        new { Id = new Guid("1c31d417-8d3d-45b4-b873-ccfa68e01337"), Name = "Walk-In Closets" },
                        new { Id = new Guid("8c4d9182-b6c3-477e-8d96-b72d2f1faa76"), Name = "Washer/Dryer Included" },
                        new { Id = new Guid("6a07d58f-5923-444f-81d6-551aee735b95"), Name = "Security System" },
                        new { Id = new Guid("019c22d7-245f-42e2-acdd-3e9c10b35f20"), Name = "Limited/Controlled Access" },
                        new { Id = new Guid("b82be4d7-5c32-406f-a6d7-18fdcf9f8957"), Name = "Elevator" },
                        new { Id = new Guid("161e328d-9113-4660-92dc-ec33d611fb5e"), Name = "Extra Storage" },
                        new { Id = new Guid("860d740f-3601-4cf0-809e-aefc29590384"), Name = "Fitness Center Nearby" },
                        new { Id = new Guid("df66f8f8-fd1a-4ad9-988e-7b07f4d1b3fc"), Name = "Business Center Nearby" },
                        new { Id = new Guid("9d820672-fba8-48cd-8809-a6504208cd93"), Name = "Laundry Facility Nearby" },
                        new { Id = new Guid("96523902-8bec-43e1-b06f-46928c1cb7c3"), Name = "Pool Nearby" },
                        new { Id = new Guid("2e249ddf-6480-48f0-a2af-d006b63c0820"), Name = "Park Nearby" },
                        new { Id = new Guid("2a862dab-b3f4-46aa-b530-523700b71dc8"), Name = "Senior Living" },
                        new { Id = new Guid("86803789-aea0-4891-9f4e-05e3d9d49c2f"), Name = "Neighbourhood Type" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid?>("SearchRequestId");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SearchRequestId");

                    b.HasIndex("TypeId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("FishResident.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ResidenceTypes");
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequests");
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.Property<string>("TimePeriod");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("AgreementsOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Agreements")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser", "Resident")
                        .WithMany("AgreementsResident")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId");

                    b.HasOne("FishResident.Models.Feature", "LinkedFeature")
                        .WithMany()
                        .HasForeignKey("LinkedFeatureId");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany("AllowedValues")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest", "SearchRequest")
                        .WithMany("FeatureRequests")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("Residences")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest")
                        .WithMany("Results")
                        .HasForeignKey("SearchRequestId");

                    b.HasOne("FishResident.Models.ResidenceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
