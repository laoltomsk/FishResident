// <auto-generated />
using System;
using FishResident.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishResident.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190622082753_FixFeatureRequest")]
    partial class FixFeatureRequest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.Property<string>("ResidentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("ResidentId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("FishResident.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CellPhone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contacts");

                    b.Property<string>("DirectOfficePhone");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("GeneralOfficePhone");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OfficePhoneExtension");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondaryEmail");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FeatureTypeId");

                    b.Property<Guid?>("LinkedFeatureId");

                    b.Property<Guid?>("ResidenceId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("LinkedFeatureId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("FeatureAllowedValues");

                    b.HasData(
                        new { Id = new Guid("ee0012d5-eb43-48b4-918f-327773354d0d"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "0" },
                        new { Id = new Guid("8e1618db-f645-457c-9bf5-e916e16e50e3"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "1" },
                        new { Id = new Guid("1f798f04-3acd-45b4-8433-b0b7538cfa5c"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "2" },
                        new { Id = new Guid("6231ae81-3442-452c-b205-66f89ff473b1"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "3" },
                        new { Id = new Guid("c4576a14-2e0b-4471-822d-57d544c76409"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "4" },
                        new { Id = new Guid("2edea846-9562-424c-bf7e-248b5285e1d3"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "5" },
                        new { Id = new Guid("378eb8ac-bae2-4ba1-bcb2-09138417eb82"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "6" },
                        new { Id = new Guid("c54c39e5-5940-472d-a0a8-0fe20cf228fc"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "7" },
                        new { Id = new Guid("830a507a-500a-4c24-b471-4cea601f3ad9"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "8" },
                        new { Id = new Guid("96bda412-22b1-4896-9e53-4fbd4bcb674f"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "9" },
                        new { Id = new Guid("9caeb92c-6499-40a1-98c6-5bf8bb347005"), FeatureTypeId = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Value = "10+" },
                        new { Id = new Guid("0ef5b21b-97a9-4266-b1b7-3c3c97a1e81e"), FeatureTypeId = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Value = "0" },
                        new { Id = new Guid("c239cb8b-25bc-43b7-bfc5-9ca41bf2cae1"), FeatureTypeId = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Value = "1" },
                        new { Id = new Guid("bb00d029-f809-4dbc-ba01-7957df83ce71"), FeatureTypeId = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Value = "2" },
                        new { Id = new Guid("bce14a65-d59c-46fd-bf4a-25d48effee2a"), FeatureTypeId = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Value = "3" },
                        new { Id = new Guid("ae79b7e8-aa2e-407b-9bc2-1104a64b50e6"), FeatureTypeId = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Value = "4" },
                        new { Id = new Guid("17342a7a-1f7b-484a-b7b1-8f47e33cd23e"), FeatureTypeId = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Value = "5+" },
                        new { Id = new Guid("a8937caf-6cbc-469c-bc29-a45b18feeccb"), FeatureTypeId = new Guid("57478598-9317-4cba-8be4-5f591ec18feb"), Value = "Small" },
                        new { Id = new Guid("7dd5e026-c3b5-48e1-af32-ff1fdab7cd7b"), FeatureTypeId = new Guid("57478598-9317-4cba-8be4-5f591ec18feb"), Value = "Medium" },
                        new { Id = new Guid("cf2247d5-2d34-4c0c-8523-3b0b6793637f"), FeatureTypeId = new Guid("57478598-9317-4cba-8be4-5f591ec18feb"), Value = "Large" },
                        new { Id = new Guid("1f45a8d3-14b2-4abd-aacc-f4b3bcfdcb94"), FeatureTypeId = new Guid("937b3c97-7db8-47ac-a09b-9d3395c1952d"), Value = "Yes" },
                        new { Id = new Guid("cb9a9d73-2a2c-402b-8dd7-ac2ee096be38"), FeatureTypeId = new Guid("937b3c97-7db8-47ac-a09b-9d3395c1952d"), Value = "No" },
                        new { Id = new Guid("253c3876-fdb6-4436-9a96-330f054bb7cf"), FeatureTypeId = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Value = "0" },
                        new { Id = new Guid("636cc7c5-4620-4bd3-aae8-77fd917be836"), FeatureTypeId = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Value = "1" },
                        new { Id = new Guid("b5bac21c-744e-477c-92cd-2955db3efbfc"), FeatureTypeId = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Value = "2" },
                        new { Id = new Guid("d03976dc-23cb-45ba-94e7-88420214d27c"), FeatureTypeId = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Value = "3" },
                        new { Id = new Guid("cf03cd96-ade6-4d7b-b5c7-277feea9a4b8"), FeatureTypeId = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Value = "4" },
                        new { Id = new Guid("7fcd9265-eb74-43b3-a2a7-fd4a6259d09e"), FeatureTypeId = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Value = "5+" },
                        new { Id = new Guid("68524a5b-d8cb-4b34-a7b7-d4adc9b437a2"), FeatureTypeId = new Guid("dcdd075d-c08d-4938-9642-13f225600074"), Value = "Yes" },
                        new { Id = new Guid("926fdec2-d23f-48c6-bfbc-0e7619c563db"), FeatureTypeId = new Guid("dcdd075d-c08d-4938-9642-13f225600074"), Value = "No" },
                        new { Id = new Guid("24294550-356c-43fa-a3c1-bb7f83d38aa5"), FeatureTypeId = new Guid("7fa87ca1-7a23-4598-9da2-b6d12edd65e4"), Value = "Yes" },
                        new { Id = new Guid("5a9da9ea-78fe-4b1f-a3d3-26f9a5871ec1"), FeatureTypeId = new Guid("7fa87ca1-7a23-4598-9da2-b6d12edd65e4"), Value = "No" },
                        new { Id = new Guid("152079ad-8faa-43ae-b839-272e2af3aec1"), FeatureTypeId = new Guid("65c21b28-780f-4b6d-98bb-50e729483b5c"), Value = "Balcony" },
                        new { Id = new Guid("e0eb45d7-83f1-4419-892a-342e4b1ac3a9"), FeatureTypeId = new Guid("65c21b28-780f-4b6d-98bb-50e729483b5c"), Value = "Patio" },
                        new { Id = new Guid("e6da504d-8b8c-4d16-8ab5-4712686c6abd"), FeatureTypeId = new Guid("65c21b28-780f-4b6d-98bb-50e729483b5c"), Value = "Deck" },
                        new { Id = new Guid("8723145b-b3cf-48c2-82a9-2d39559dae1c"), FeatureTypeId = new Guid("a8924dd4-21db-4edc-a42e-1892f5aee16d"), Value = "Yes" },
                        new { Id = new Guid("b6c265a1-a86d-4bca-a7c0-77d6f6422540"), FeatureTypeId = new Guid("a8924dd4-21db-4edc-a42e-1892f5aee16d"), Value = "No" },
                        new { Id = new Guid("e48af425-f4bf-44c1-9bf6-dfda31a1df17"), FeatureTypeId = new Guid("c3dc2772-e45f-451e-88e5-e8522186b0aa"), Value = "Yes" },
                        new { Id = new Guid("3bf0919f-af5c-40d4-bda7-b797bf19c1db"), FeatureTypeId = new Guid("c3dc2772-e45f-451e-88e5-e8522186b0aa"), Value = "No" },
                        new { Id = new Guid("c4ebbe02-1275-4896-a612-bb975e22d280"), FeatureTypeId = new Guid("6715c76f-6558-4f96-8a40-1bc6889c66f9"), Value = "Yes" },
                        new { Id = new Guid("303163a1-1d30-4dc5-b3db-0e8bcac08edf"), FeatureTypeId = new Guid("6715c76f-6558-4f96-8a40-1bc6889c66f9"), Value = "No" },
                        new { Id = new Guid("06378d12-02ec-4556-a008-99d8d007edb9"), FeatureTypeId = new Guid("e443f1a1-055b-40e7-ae86-3955cf5bd577"), Value = "Yes" },
                        new { Id = new Guid("98266d0b-0983-4eda-8250-f540e6073c37"), FeatureTypeId = new Guid("e443f1a1-055b-40e7-ae86-3955cf5bd577"), Value = "No" },
                        new { Id = new Guid("a036613c-6ac6-43e4-950e-f952a6dd54b3"), FeatureTypeId = new Guid("77159a7e-f7da-4bcd-a301-6d34579b9ea4"), Value = "Yes" },
                        new { Id = new Guid("5f0328ba-f188-405e-adf8-a4675ed91c8b"), FeatureTypeId = new Guid("77159a7e-f7da-4bcd-a301-6d34579b9ea4"), Value = "No" },
                        new { Id = new Guid("aafed77b-a604-4128-81e3-af6c07e10bf4"), FeatureTypeId = new Guid("ed85dcd6-2259-4000-9d78-83d39d003054"), Value = "Some" },
                        new { Id = new Guid("7c3e9bff-a31f-424f-9f1d-18067ba3db70"), FeatureTypeId = new Guid("ed85dcd6-2259-4000-9d78-83d39d003054"), Value = "All" },
                        new { Id = new Guid("65e14aca-3e78-4ff1-b7c7-13e640952877"), FeatureTypeId = new Guid("88ecc0f0-d274-4cb2-80cc-21b9b181509d"), Value = "Yes" },
                        new { Id = new Guid("e40656bd-48ae-4df2-9e12-f8b651aacdd1"), FeatureTypeId = new Guid("88ecc0f0-d274-4cb2-80cc-21b9b181509d"), Value = "No" },
                        new { Id = new Guid("2387caf3-fcd1-46fd-b90b-0dc75eccba10"), FeatureTypeId = new Guid("7a1a6a8c-5ca1-40f8-8a96-05ea053a1fd5"), Value = "Yes" },
                        new { Id = new Guid("eb5033bd-d9b3-4663-95a0-23e1af52b912"), FeatureTypeId = new Guid("7a1a6a8c-5ca1-40f8-8a96-05ea053a1fd5"), Value = "No" },
                        new { Id = new Guid("2ff130ff-dd3a-4fe3-8f8d-767f9865c6ec"), FeatureTypeId = new Guid("04683642-772c-4c6e-a3dc-df41a2f58c9d"), Value = "Yes" },
                        new { Id = new Guid("71e37bd3-c17e-4b0a-ac10-bca430d40d04"), FeatureTypeId = new Guid("04683642-772c-4c6e-a3dc-df41a2f58c9d"), Value = "No" },
                        new { Id = new Guid("b8a388a3-2969-420f-a531-4b2fd2fe0e61"), FeatureTypeId = new Guid("6ec393eb-ba7b-4082-9f7f-56b4bcda509f"), Value = "Yes" },
                        new { Id = new Guid("65abc4df-7ccc-48b1-a7fe-f8b8f2356ed9"), FeatureTypeId = new Guid("6ec393eb-ba7b-4082-9f7f-56b4bcda509f"), Value = "No" },
                        new { Id = new Guid("e73cf9e3-1d9e-4c97-a97c-2c0bfa1224c7"), FeatureTypeId = new Guid("a6ee3008-d8e2-4b84-8df5-14486e388910"), Value = "Yes" },
                        new { Id = new Guid("bae3cc8d-e181-4e8d-b973-96d94bc5f20c"), FeatureTypeId = new Guid("a6ee3008-d8e2-4b84-8df5-14486e388910"), Value = "No" },
                        new { Id = new Guid("b2340244-ebbe-4611-9cd1-44846f2b5cc0"), FeatureTypeId = new Guid("1050fafc-c9d4-41c6-a7e6-5512e879a49b"), Value = "Yes" },
                        new { Id = new Guid("b81d38e1-0c81-4de8-af9f-6082bd77edf0"), FeatureTypeId = new Guid("1050fafc-c9d4-41c6-a7e6-5512e879a49b"), Value = "No" },
                        new { Id = new Guid("6653c398-40db-40ff-b921-6aec5a0fb56a"), FeatureTypeId = new Guid("183b3a2b-f1ae-4bc3-a466-4316bd979b62"), Value = "Yes" },
                        new { Id = new Guid("bf79871a-c5bb-4251-adeb-29ad57b30456"), FeatureTypeId = new Guid("183b3a2b-f1ae-4bc3-a466-4316bd979b62"), Value = "No" },
                        new { Id = new Guid("3cd70778-fcaa-4a7e-a1ba-98243e6f53f4"), FeatureTypeId = new Guid("66446dcf-daca-4d16-b07a-742b4b289e3f"), Value = "Yes" },
                        new { Id = new Guid("51ab440f-859f-420a-9a82-7a8314dcf39b"), FeatureTypeId = new Guid("66446dcf-daca-4d16-b07a-742b4b289e3f"), Value = "No" },
                        new { Id = new Guid("3c2146e7-a4a7-469b-941b-2c1f9f599e71"), FeatureTypeId = new Guid("92f0d669-1ebf-4a0f-9873-56f0307fe59d"), Value = "Yes" },
                        new { Id = new Guid("c058e01e-5b40-4170-a67c-bd2ffb34a46f"), FeatureTypeId = new Guid("92f0d669-1ebf-4a0f-9873-56f0307fe59d"), Value = "No" },
                        new { Id = new Guid("a1ff04d7-bba3-4f35-bb1a-e13ef6679ec0"), FeatureTypeId = new Guid("2f754291-21a1-4568-b814-9d46f8378c8e"), Value = "Yes" },
                        new { Id = new Guid("5c7de023-ab96-4872-8e5f-1839aee7422b"), FeatureTypeId = new Guid("2f754291-21a1-4568-b814-9d46f8378c8e"), Value = "No" },
                        new { Id = new Guid("8aead044-2290-42eb-a719-cdeee711ae54"), FeatureTypeId = new Guid("0120b1e3-7ccb-4c0c-a4ca-64f38aa218b9"), Value = "Yes" },
                        new { Id = new Guid("2d96fe65-e692-456f-8a60-68917c67492c"), FeatureTypeId = new Guid("0120b1e3-7ccb-4c0c-a4ca-64f38aa218b9"), Value = "No" },
                        new { Id = new Guid("20bf3a4a-65a3-42da-8617-b98bf9491d00"), FeatureTypeId = new Guid("70ed65e3-d363-4a0a-8029-cc06ac6ed141"), Value = "Yes" },
                        new { Id = new Guid("2174f6e1-10b2-4c53-b435-e1cbfb08f764"), FeatureTypeId = new Guid("70ed65e3-d363-4a0a-8029-cc06ac6ed141"), Value = "No" },
                        new { Id = new Guid("4815fcf9-cf19-405f-9e2a-48301f436ecf"), FeatureTypeId = new Guid("f60040d0-1055-457d-a5e7-0205bc976fbc"), Value = "Downtown" },
                        new { Id = new Guid("5388e535-9222-4a59-899b-c38012609753"), FeatureTypeId = new Guid("f60040d0-1055-457d-a5e7-0205bc976fbc"), Value = "Uptown" },
                        new { Id = new Guid("cbd1dd50-ccb5-4403-b1bc-c26eaa4229a0"), FeatureTypeId = new Guid("f60040d0-1055-457d-a5e7-0205bc976fbc"), Value = "Rural" },
                        new { Id = new Guid("c14f80c6-3ffc-4bf2-af63-3ab1db5705c6"), FeatureTypeId = new Guid("f60040d0-1055-457d-a5e7-0205bc976fbc"), Value = "Suburban" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<Guid>("SearchRequestId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("FeatureRequests");
                });

            modelBuilder.Entity("FishResident.Models.FeatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.HasData(
                        new { Id = new Guid("71da9edf-3f7b-4ce2-aa17-a290f756e109"), Name = "Number of Bedrooms" },
                        new { Id = new Guid("75d6df80-84da-4ab6-8326-bb22201ce618"), Name = "Number of Bathrooms" },
                        new { Id = new Guid("57478598-9317-4cba-8be4-5f591ec18feb"), Name = "Kitchen size" },
                        new { Id = new Guid("937b3c97-7db8-47ac-a09b-9d3395c1952d"), Name = "Garage" },
                        new { Id = new Guid("501d1cd3-c83c-40e5-9873-4b58297361ac"), Name = "Number of Auto Spaces" },
                        new { Id = new Guid("dcdd075d-c08d-4938-9642-13f225600074"), Name = "Pets Allowed" },
                        new { Id = new Guid("7fa87ca1-7a23-4598-9da2-b6d12edd65e4"), Name = "Air Conditioning" },
                        new { Id = new Guid("65c21b28-780f-4b6d-98bb-50e729483b5c"), Name = "Balcony Type" },
                        new { Id = new Guid("a8924dd4-21db-4edc-a42e-1892f5aee16d"), Name = "Cable Ready" },
                        new { Id = new Guid("c3dc2772-e45f-451e-88e5-e8522186b0aa"), Name = "Dishwasher" },
                        new { Id = new Guid("6715c76f-6558-4f96-8a40-1bc6889c66f9"), Name = "Microwave Included" },
                        new { Id = new Guid("e443f1a1-055b-40e7-ae86-3955cf5bd577"), Name = "Handicap Accessible" },
                        new { Id = new Guid("77159a7e-f7da-4bcd-a301-6d34579b9ea4"), Name = "Hardwood Floors" },
                        new { Id = new Guid("ed85dcd6-2259-4000-9d78-83d39d003054"), Name = "Utilities Covered" },
                        new { Id = new Guid("88ecc0f0-d274-4cb2-80cc-21b9b181509d"), Name = "Walk-In Closets" },
                        new { Id = new Guid("7a1a6a8c-5ca1-40f8-8a96-05ea053a1fd5"), Name = "Washer/Dryer Included" },
                        new { Id = new Guid("04683642-772c-4c6e-a3dc-df41a2f58c9d"), Name = "Security System" },
                        new { Id = new Guid("6ec393eb-ba7b-4082-9f7f-56b4bcda509f"), Name = "Limited/Controlled Access" },
                        new { Id = new Guid("a6ee3008-d8e2-4b84-8df5-14486e388910"), Name = "Elevator" },
                        new { Id = new Guid("1050fafc-c9d4-41c6-a7e6-5512e879a49b"), Name = "Extra Storage" },
                        new { Id = new Guid("183b3a2b-f1ae-4bc3-a466-4316bd979b62"), Name = "Fitness Center Nearby" },
                        new { Id = new Guid("66446dcf-daca-4d16-b07a-742b4b289e3f"), Name = "Business Center Nearby" },
                        new { Id = new Guid("92f0d669-1ebf-4a0f-9873-56f0307fe59d"), Name = "Laundry Facility Nearby" },
                        new { Id = new Guid("2f754291-21a1-4568-b814-9d46f8378c8e"), Name = "Pool Nearby" },
                        new { Id = new Guid("0120b1e3-7ccb-4c0c-a4ca-64f38aa218b9"), Name = "Park Nearby" },
                        new { Id = new Guid("70ed65e3-d363-4a0a-8029-cc06ac6ed141"), Name = "Senior Living" },
                        new { Id = new Guid("f60040d0-1055-457d-a5e7-0205bc976fbc"), Name = "Neighbourhood Type" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid?>("SearchRequestId");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SearchRequestId");

                    b.HasIndex("TypeId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.ToTable("ResidencePhotos");
                });

            modelBuilder.Entity("FishResident.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ResidenceTypes");
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequests");
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.Property<string>("TimePeriod");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("AgreementsOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Agreements")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser", "Resident")
                        .WithMany("AgreementsResident")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId");

                    b.HasOne("FishResident.Models.Feature", "LinkedFeature")
                        .WithMany()
                        .HasForeignKey("LinkedFeatureId");

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Features")
                        .HasForeignKey("ResidenceId");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany("AllowedValues")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest", "SearchRequest")
                        .WithMany("FeatureRequests")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("Residences")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest")
                        .WithMany("Results")
                        .HasForeignKey("SearchRequestId");

                    b.HasOne("FishResident.Models.ResidenceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("ResidencePhotos")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
