// <auto-generated />
using System;
using FishResident.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishResident.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190625083908_SeedResidenceTypes")]
    partial class SeedResidenceTypes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.Property<string>("ResidentId")
                        .IsRequired();

                    b.Property<bool>("isDone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("ResidentId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("FishResident.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CellPhone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contacts");

                    b.Property<string>("DirectOfficePhone");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("GeneralOfficePhone");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OfficePhoneExtension");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondaryEmail");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FeatureTypeId");

                    b.Property<Guid?>("LinkedFeatureId");

                    b.Property<Guid?>("ResidenceId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("LinkedFeatureId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("FeatureAllowedValues");

                    b.HasData(
                        new { Id = new Guid("676b6396-be1d-4a3c-b10f-59f90c7e3a89"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "0" },
                        new { Id = new Guid("ebfddba9-f995-4d06-a86a-062ef0c883a4"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "1" },
                        new { Id = new Guid("a52f4727-eb0a-4018-b321-083e426df9f8"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "2" },
                        new { Id = new Guid("50808a49-56b3-4e2e-ae3a-10657f985e28"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "3" },
                        new { Id = new Guid("d0898ba4-132e-4b4c-8286-10e415d165c6"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "4" },
                        new { Id = new Guid("6a0acbe7-f8f5-4e6b-9620-f7ff90ee239a"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "5" },
                        new { Id = new Guid("ddf681a2-fe15-4342-a6a1-d0de62d50695"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "6" },
                        new { Id = new Guid("7c1183fd-066d-40d8-9027-cf14fbee6d39"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "7" },
                        new { Id = new Guid("27ff5c0a-6399-499c-a96c-de747e90cffc"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "8" },
                        new { Id = new Guid("4bebd520-ec53-44be-b4f4-cfa1c241aecb"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "9" },
                        new { Id = new Guid("91969fb4-d51f-4e5e-b08a-a5955e01eb7a"), FeatureTypeId = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Value = "10+" },
                        new { Id = new Guid("f0b5a09f-496c-46e6-b871-7803fe9bc867"), FeatureTypeId = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Value = "0" },
                        new { Id = new Guid("adf8db62-506d-48ac-82e5-45c2ca0b7f4b"), FeatureTypeId = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Value = "1" },
                        new { Id = new Guid("55f3dd68-eb6d-45c9-abf1-613bcf62b72e"), FeatureTypeId = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Value = "2" },
                        new { Id = new Guid("718a9aff-d881-472a-954a-f129c6c49543"), FeatureTypeId = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Value = "3" },
                        new { Id = new Guid("4dd41994-9f4a-45ed-a5e7-929b216792ca"), FeatureTypeId = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Value = "4" },
                        new { Id = new Guid("8f68e712-68c7-47ba-bcf0-d0e8f0284647"), FeatureTypeId = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Value = "5+" },
                        new { Id = new Guid("f2341c91-513f-48e1-a934-5648a34ad893"), FeatureTypeId = new Guid("e2ecc9d0-cd7f-404e-90e7-5de1cbd7f72d"), Value = "Small" },
                        new { Id = new Guid("4cb411b9-22a5-4af6-ba4f-15a3909e5419"), FeatureTypeId = new Guid("e2ecc9d0-cd7f-404e-90e7-5de1cbd7f72d"), Value = "Medium" },
                        new { Id = new Guid("dc582367-1a89-450f-8041-8b1ebb308386"), FeatureTypeId = new Guid("e2ecc9d0-cd7f-404e-90e7-5de1cbd7f72d"), Value = "Large" },
                        new { Id = new Guid("f098bc8c-f8dc-4fb4-8ad3-20f666ddcf39"), FeatureTypeId = new Guid("3f826978-6f09-4b3b-9320-291c7acd31df"), Value = "Yes" },
                        new { Id = new Guid("9959fe9a-3f90-4de8-8d8c-d7f5ce12f73a"), FeatureTypeId = new Guid("3f826978-6f09-4b3b-9320-291c7acd31df"), Value = "No" },
                        new { Id = new Guid("7d5c38e9-68be-44a4-b031-5ac9869bc400"), FeatureTypeId = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Value = "0" },
                        new { Id = new Guid("4af4d000-d508-4c2e-beb5-86c198801a6d"), FeatureTypeId = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Value = "1" },
                        new { Id = new Guid("08ba2ce0-dc0b-4448-8683-f2250005e596"), FeatureTypeId = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Value = "2" },
                        new { Id = new Guid("d7d4a7c4-3b18-45aa-9689-6583536113d1"), FeatureTypeId = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Value = "3" },
                        new { Id = new Guid("43c07200-4670-4116-ada8-8f7e45666962"), FeatureTypeId = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Value = "4" },
                        new { Id = new Guid("94dda196-73e3-4373-bb97-eb94bcb8d3b6"), FeatureTypeId = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Value = "5+" },
                        new { Id = new Guid("1ca2c064-f898-4fc6-aa1b-7743a14e1155"), FeatureTypeId = new Guid("bec8881c-7e47-4604-86d4-3e8e6e4c4c6d"), Value = "Yes" },
                        new { Id = new Guid("96993452-6246-4853-9fb7-73693a902c1e"), FeatureTypeId = new Guid("bec8881c-7e47-4604-86d4-3e8e6e4c4c6d"), Value = "No" },
                        new { Id = new Guid("8d0e8a6d-877f-4d93-bde0-f2a579c27a63"), FeatureTypeId = new Guid("63da3546-fe6c-4e69-ab80-01debda68abb"), Value = "Yes" },
                        new { Id = new Guid("375ffdd6-f281-4d17-946a-0d7bee739e82"), FeatureTypeId = new Guid("63da3546-fe6c-4e69-ab80-01debda68abb"), Value = "No" },
                        new { Id = new Guid("8fb5e8a0-4400-4fe1-869c-fdca70b61638"), FeatureTypeId = new Guid("87e99b10-d3a9-43cd-804b-065b2acbf0e0"), Value = "Balcony" },
                        new { Id = new Guid("36b25830-75fe-45e5-9580-3cc23fe09249"), FeatureTypeId = new Guid("87e99b10-d3a9-43cd-804b-065b2acbf0e0"), Value = "Patio" },
                        new { Id = new Guid("5a655bf9-ed6b-4e90-b63f-8c8be2e3a9d1"), FeatureTypeId = new Guid("87e99b10-d3a9-43cd-804b-065b2acbf0e0"), Value = "Deck" },
                        new { Id = new Guid("499b50b7-84cd-4c5f-b985-bf996e24f0d0"), FeatureTypeId = new Guid("aa09d108-32b4-4085-9d3b-f3a8f861ae23"), Value = "Yes" },
                        new { Id = new Guid("0c696574-bbe5-4016-bac3-ea4ce1141d02"), FeatureTypeId = new Guid("aa09d108-32b4-4085-9d3b-f3a8f861ae23"), Value = "No" },
                        new { Id = new Guid("0fe86a6f-7bfa-40da-a164-49136a2a359c"), FeatureTypeId = new Guid("15540173-d407-4fe5-8803-19b09c862801"), Value = "Yes" },
                        new { Id = new Guid("eeaa84c4-d6c3-4c59-9b19-962805275e04"), FeatureTypeId = new Guid("15540173-d407-4fe5-8803-19b09c862801"), Value = "No" },
                        new { Id = new Guid("2722ca16-66be-449a-8412-37095cdaea15"), FeatureTypeId = new Guid("30f5f158-b129-4cbf-ae25-31633a6bb4a6"), Value = "Yes" },
                        new { Id = new Guid("a216684c-1769-4c30-8e67-e7d5f5f12f93"), FeatureTypeId = new Guid("30f5f158-b129-4cbf-ae25-31633a6bb4a6"), Value = "No" },
                        new { Id = new Guid("caaffc47-bd03-4b32-9fad-08e6c6d30b29"), FeatureTypeId = new Guid("4d425503-599e-437d-927d-08fe67e1e717"), Value = "Yes" },
                        new { Id = new Guid("806c9cb3-379b-4087-8ba7-eb014ee475fe"), FeatureTypeId = new Guid("4d425503-599e-437d-927d-08fe67e1e717"), Value = "No" },
                        new { Id = new Guid("fb35c2fc-d46b-43b9-a833-ebae8c7df137"), FeatureTypeId = new Guid("d6bd3bc5-bda7-4383-bd80-a43351976f60"), Value = "Yes" },
                        new { Id = new Guid("71268592-3ee3-4ec9-b053-bcee2e486022"), FeatureTypeId = new Guid("d6bd3bc5-bda7-4383-bd80-a43351976f60"), Value = "No" },
                        new { Id = new Guid("6c9d592b-bceb-4a56-9d48-9638732b6b93"), FeatureTypeId = new Guid("113522fc-af07-4a5d-bb89-14f21d9ce37f"), Value = "Some" },
                        new { Id = new Guid("988e4547-a3e5-4e71-a43b-128d9d88c597"), FeatureTypeId = new Guid("113522fc-af07-4a5d-bb89-14f21d9ce37f"), Value = "All" },
                        new { Id = new Guid("17ffeb9c-11c7-44f8-89c9-085a6e1fdb6a"), FeatureTypeId = new Guid("c8ef85e2-07fc-45e4-a891-ca5b1a827993"), Value = "Yes" },
                        new { Id = new Guid("038c14ff-474b-4386-a01e-fb9f5f910b64"), FeatureTypeId = new Guid("c8ef85e2-07fc-45e4-a891-ca5b1a827993"), Value = "No" },
                        new { Id = new Guid("d02d6506-a878-4051-9156-1e3d6321c6bc"), FeatureTypeId = new Guid("173c5b3b-bdfc-4326-bd0c-4ad3554ac1d5"), Value = "Yes" },
                        new { Id = new Guid("fea8a101-ae1f-4884-9c45-f6e649ef6f91"), FeatureTypeId = new Guid("173c5b3b-bdfc-4326-bd0c-4ad3554ac1d5"), Value = "No" },
                        new { Id = new Guid("5bbf03a3-0cc1-4b3b-bcfc-c8d0efd5d678"), FeatureTypeId = new Guid("f9477ed5-c6a0-4a49-abcb-190116f01999"), Value = "Yes" },
                        new { Id = new Guid("8b283687-6486-4852-9c83-3ff1bcfb9be2"), FeatureTypeId = new Guid("f9477ed5-c6a0-4a49-abcb-190116f01999"), Value = "No" },
                        new { Id = new Guid("39346fa0-30f2-4201-8d70-77de04acfea6"), FeatureTypeId = new Guid("6d2cc41f-6199-41c6-9685-58901ce30455"), Value = "Yes" },
                        new { Id = new Guid("7f97b283-31c3-4e55-9825-3ef603c8176c"), FeatureTypeId = new Guid("6d2cc41f-6199-41c6-9685-58901ce30455"), Value = "No" },
                        new { Id = new Guid("21dbb4e0-1c0b-45a2-9578-273d0c76b902"), FeatureTypeId = new Guid("f665a2ba-9682-4c40-a43e-76d1c9c43680"), Value = "Yes" },
                        new { Id = new Guid("4670bfb0-2a52-4845-bd7a-3a3d173682d6"), FeatureTypeId = new Guid("f665a2ba-9682-4c40-a43e-76d1c9c43680"), Value = "No" },
                        new { Id = new Guid("51338e48-7da6-40c7-8b34-3b6535636054"), FeatureTypeId = new Guid("3b2d5dca-1c44-4be5-b39f-b20bc6fefeb4"), Value = "Yes" },
                        new { Id = new Guid("a403f025-fb57-4447-a109-d7054c9d8e41"), FeatureTypeId = new Guid("3b2d5dca-1c44-4be5-b39f-b20bc6fefeb4"), Value = "No" },
                        new { Id = new Guid("934d7210-6de3-4581-86a1-6d90775d8f93"), FeatureTypeId = new Guid("795d222b-3312-4d70-bd2f-5fc1f8b60dc1"), Value = "Yes" },
                        new { Id = new Guid("78a6ad8c-b9bc-4a47-b0b5-6eda3fac0a70"), FeatureTypeId = new Guid("795d222b-3312-4d70-bd2f-5fc1f8b60dc1"), Value = "No" },
                        new { Id = new Guid("6be41302-0b5d-4bd6-9929-dd5171c72982"), FeatureTypeId = new Guid("39c25ddc-cca3-496a-a9c4-73a9a1d58003"), Value = "Yes" },
                        new { Id = new Guid("b04580d4-550d-445e-9aee-46e801a94132"), FeatureTypeId = new Guid("39c25ddc-cca3-496a-a9c4-73a9a1d58003"), Value = "No" },
                        new { Id = new Guid("6ea17a17-1358-42e4-9b3d-870ccc291b89"), FeatureTypeId = new Guid("0063eb7b-9941-472f-89cc-d6fe9584315c"), Value = "Yes" },
                        new { Id = new Guid("2d912984-5268-4963-a5d1-47e73ac3570b"), FeatureTypeId = new Guid("0063eb7b-9941-472f-89cc-d6fe9584315c"), Value = "No" },
                        new { Id = new Guid("43cd9fff-8d96-46c5-88b1-e936c6b8f216"), FeatureTypeId = new Guid("3dc8cd63-166c-4585-b501-94f9e1736ed5"), Value = "Yes" },
                        new { Id = new Guid("fbd396f1-330a-4420-8ee3-4dbaf6d2683c"), FeatureTypeId = new Guid("3dc8cd63-166c-4585-b501-94f9e1736ed5"), Value = "No" },
                        new { Id = new Guid("70aaa641-a9c1-4798-bde8-ecfd2025075f"), FeatureTypeId = new Guid("9810bf6e-e711-412d-8b7d-62cd434fd35f"), Value = "Yes" },
                        new { Id = new Guid("99662d12-fddf-4a65-adb0-278ef92a0659"), FeatureTypeId = new Guid("9810bf6e-e711-412d-8b7d-62cd434fd35f"), Value = "No" },
                        new { Id = new Guid("f23563b7-464f-405f-b7a1-68d3bbfab20e"), FeatureTypeId = new Guid("ec00851b-2ffa-4e78-9825-42d44799d94a"), Value = "Yes" },
                        new { Id = new Guid("dddb897d-94f1-4fb5-bff5-d2d295eea73d"), FeatureTypeId = new Guid("ec00851b-2ffa-4e78-9825-42d44799d94a"), Value = "No" },
                        new { Id = new Guid("35bf3287-0d50-4596-a410-a6ac8572c0ea"), FeatureTypeId = new Guid("c7324aca-2526-47a0-adc3-04eba89d6a15"), Value = "Downtown" },
                        new { Id = new Guid("df2bb9b7-dc37-4b0a-ab04-24cd62211d51"), FeatureTypeId = new Guid("c7324aca-2526-47a0-adc3-04eba89d6a15"), Value = "Uptown" },
                        new { Id = new Guid("a47063a7-c951-4adb-a96e-207a94f9c216"), FeatureTypeId = new Guid("c7324aca-2526-47a0-adc3-04eba89d6a15"), Value = "Rural" },
                        new { Id = new Guid("457b6c8e-bc3e-4252-bde4-1286b3c19d3a"), FeatureTypeId = new Guid("c7324aca-2526-47a0-adc3-04eba89d6a15"), Value = "Suburban" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<Guid>("SearchRequestId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("FeatureRequests");
                });

            modelBuilder.Entity("FishResident.Models.FeatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.HasData(
                        new { Id = new Guid("84f6a169-d93d-467a-9efc-1df61c7d62e2"), Name = "Number of Bedrooms" },
                        new { Id = new Guid("4dc1b987-d83e-48db-9ba6-b3fe28e25a8e"), Name = "Number of Bathrooms" },
                        new { Id = new Guid("e2ecc9d0-cd7f-404e-90e7-5de1cbd7f72d"), Name = "Kitchen size" },
                        new { Id = new Guid("3f826978-6f09-4b3b-9320-291c7acd31df"), Name = "Garage" },
                        new { Id = new Guid("4da23613-7f26-4f5d-a7d8-7c5153f9b85a"), Name = "Number of Auto Spaces" },
                        new { Id = new Guid("bec8881c-7e47-4604-86d4-3e8e6e4c4c6d"), Name = "Pets Allowed" },
                        new { Id = new Guid("63da3546-fe6c-4e69-ab80-01debda68abb"), Name = "Air Conditioning" },
                        new { Id = new Guid("87e99b10-d3a9-43cd-804b-065b2acbf0e0"), Name = "Balcony Type" },
                        new { Id = new Guid("aa09d108-32b4-4085-9d3b-f3a8f861ae23"), Name = "Cable Ready" },
                        new { Id = new Guid("15540173-d407-4fe5-8803-19b09c862801"), Name = "Dishwasher" },
                        new { Id = new Guid("30f5f158-b129-4cbf-ae25-31633a6bb4a6"), Name = "Microwave Included" },
                        new { Id = new Guid("4d425503-599e-437d-927d-08fe67e1e717"), Name = "Handicap Accessible" },
                        new { Id = new Guid("d6bd3bc5-bda7-4383-bd80-a43351976f60"), Name = "Hardwood Floors" },
                        new { Id = new Guid("113522fc-af07-4a5d-bb89-14f21d9ce37f"), Name = "Utilities Covered" },
                        new { Id = new Guid("c8ef85e2-07fc-45e4-a891-ca5b1a827993"), Name = "Walk-In Closets" },
                        new { Id = new Guid("173c5b3b-bdfc-4326-bd0c-4ad3554ac1d5"), Name = "Washer/Dryer Included" },
                        new { Id = new Guid("f9477ed5-c6a0-4a49-abcb-190116f01999"), Name = "Security System" },
                        new { Id = new Guid("6d2cc41f-6199-41c6-9685-58901ce30455"), Name = "Limited/Controlled Access" },
                        new { Id = new Guid("f665a2ba-9682-4c40-a43e-76d1c9c43680"), Name = "Elevator" },
                        new { Id = new Guid("3b2d5dca-1c44-4be5-b39f-b20bc6fefeb4"), Name = "Extra Storage" },
                        new { Id = new Guid("795d222b-3312-4d70-bd2f-5fc1f8b60dc1"), Name = "Fitness Center Nearby" },
                        new { Id = new Guid("39c25ddc-cca3-496a-a9c4-73a9a1d58003"), Name = "Business Center Nearby" },
                        new { Id = new Guid("0063eb7b-9941-472f-89cc-d6fe9584315c"), Name = "Laundry Facility Nearby" },
                        new { Id = new Guid("3dc8cd63-166c-4585-b501-94f9e1736ed5"), Name = "Pool Nearby" },
                        new { Id = new Guid("9810bf6e-e711-412d-8b7d-62cd434fd35f"), Name = "Park Nearby" },
                        new { Id = new Guid("ec00851b-2ffa-4e78-9825-42d44799d94a"), Name = "Senior Living" },
                        new { Id = new Guid("c7324aca-2526-47a0-adc3-04eba89d6a15"), Name = "Neighbourhood Type" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("FishResident.Models.RequestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Relevance");

                    b.Property<Guid>("ResidenceId");

                    b.Property<Guid>("SearchRequestId");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("RequestResults");
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.ToTable("ResidencePhotos");
                });

            modelBuilder.Entity("FishResident.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ResidenceTypes");

                    b.HasData(
                        new { Id = new Guid("af3a041c-6848-46e8-b0cc-44bce4bca869"), Name = "Flat" },
                        new { Id = new Guid("c16c4cdb-896c-4eac-969a-f52485e7d926"), Name = "Cottage" },
                        new { Id = new Guid("4c6198f1-384e-47e3-af43-63397fed6020"), Name = "Bungalow" },
                        new { Id = new Guid("08fa6093-cd03-4860-a30d-5593851e7d38"), Name = "Park home" },
                        new { Id = new Guid("2053501c-d984-4eb0-b0b0-d4f89187ba2e"), Name = "Maisonette" },
                        new { Id = new Guid("dfec4b1f-b5de-432d-919b-e83a675ccf96"), Name = "House" },
                        new { Id = new Guid("691ce1c6-09ac-439a-8b91-70f5028a772a"), Name = "Mansion" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequests");
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.Property<string>("TimePeriod");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("AgreementsOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Agreements")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser", "Resident")
                        .WithMany("AgreementsResident")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId");

                    b.HasOne("FishResident.Models.Feature", "LinkedFeature")
                        .WithMany()
                        .HasForeignKey("LinkedFeatureId");

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Features")
                        .HasForeignKey("ResidenceId");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany("AllowedValues")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest", "SearchRequest")
                        .WithMany("FeatureRequests")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.RequestResult", b =>
                {
                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Requests")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest", "SearchRequest")
                        .WithMany("Results")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("Residences")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ResidenceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("ResidencePhotos")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
