// <auto-generated />
using System;
using FishResident.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FishResident.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190622041411_AddFeatureValues")]
    partial class AddFeatureValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.Property<string>("ResidentId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("ResidentId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("FishResident.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CellPhone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contacts");

                    b.Property<string>("DirectOfficePhone");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("GeneralOfficePhone");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("OfficePhoneExtension");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecondaryEmail");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("FeatureTypeId");

                    b.Property<Guid?>("LinkedFeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.HasIndex("LinkedFeatureId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureTypeId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureTypeId");

                    b.ToTable("FeatureAllowedValues");

                    b.HasData(
                        new { Id = new Guid("9908bd38-7d1b-437d-9299-56b7fc0b238c"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "0" },
                        new { Id = new Guid("bb01ec5b-49b0-43ef-84de-8d1935c099ea"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "1" },
                        new { Id = new Guid("2a6319ea-b1a3-4af4-8273-5be9a8ef5a12"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "2" },
                        new { Id = new Guid("568d7af2-e4cc-4fed-9595-7bc2df0be325"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "3" },
                        new { Id = new Guid("d0f567c1-d475-43e2-8861-8f2189f69024"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "4" },
                        new { Id = new Guid("98ab7245-2698-4b86-afad-abc0ab888cb7"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "5" },
                        new { Id = new Guid("00a3fc17-6dab-4ea7-9cec-21043b0377d9"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "6" },
                        new { Id = new Guid("226ada80-b42f-4f42-bf62-d1ee58a4f7c2"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "7" },
                        new { Id = new Guid("1b2382cf-0d1b-4e7b-8d6b-a624101a6921"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "8" },
                        new { Id = new Guid("39f8ca85-faa4-45e1-9120-6de97539a985"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "9" },
                        new { Id = new Guid("77757ba3-4727-42bd-ab05-d9590f67eceb"), FeatureTypeId = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Value = "10+" },
                        new { Id = new Guid("f5b59f3c-b3f8-470d-921f-415d195dff66"), FeatureTypeId = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Value = "0" },
                        new { Id = new Guid("f2f7b92c-34b4-4219-82b1-ca76ff71f6cc"), FeatureTypeId = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Value = "1" },
                        new { Id = new Guid("042a5c05-2126-4ac9-8377-a37f795f9d50"), FeatureTypeId = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Value = "2" },
                        new { Id = new Guid("4928813a-0e1e-476d-b3bc-081b943849c9"), FeatureTypeId = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Value = "3" },
                        new { Id = new Guid("e87cd26c-9b16-4f9b-8e38-bff649b302e3"), FeatureTypeId = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Value = "4" },
                        new { Id = new Guid("10212a7f-8f2f-470b-81b8-f19ec65e56be"), FeatureTypeId = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Value = "5+" },
                        new { Id = new Guid("ccc0e3e0-230f-4c6a-bf15-6558474b14c4"), FeatureTypeId = new Guid("ace127e3-2f34-4d40-abc1-703b485f1e36"), Value = "Small" },
                        new { Id = new Guid("f970f894-18c3-46d6-bfd0-52710e0db7e9"), FeatureTypeId = new Guid("ace127e3-2f34-4d40-abc1-703b485f1e36"), Value = "Medium" },
                        new { Id = new Guid("0e93a2c9-ef77-4f28-9aa2-abadbc0eae0c"), FeatureTypeId = new Guid("ace127e3-2f34-4d40-abc1-703b485f1e36"), Value = "Large" },
                        new { Id = new Guid("5385ba79-ff84-4ab6-a62e-778c77a2e582"), FeatureTypeId = new Guid("db7ebcab-eec7-4016-bc1b-94280113679f"), Value = "Yes" },
                        new { Id = new Guid("175481f1-2e16-48a9-b27e-0d81e8138f14"), FeatureTypeId = new Guid("db7ebcab-eec7-4016-bc1b-94280113679f"), Value = "No" },
                        new { Id = new Guid("e7ae677a-4394-4c70-8a8d-ac0a3770c3cb"), FeatureTypeId = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Value = "0" },
                        new { Id = new Guid("460e8f48-b2e0-45cc-b185-077074483913"), FeatureTypeId = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Value = "1" },
                        new { Id = new Guid("136317da-4d3a-448a-992d-d58637e3f6b9"), FeatureTypeId = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Value = "2" },
                        new { Id = new Guid("177a8259-38ad-439c-8b5c-649eb5273057"), FeatureTypeId = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Value = "3" },
                        new { Id = new Guid("b47789e5-703c-4171-8291-e147e22cfbae"), FeatureTypeId = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Value = "4" },
                        new { Id = new Guid("ac913932-5db6-4108-bd80-a77733dac358"), FeatureTypeId = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Value = "5+" },
                        new { Id = new Guid("f68e08f6-0a76-43aa-9265-4fee9e352a73"), FeatureTypeId = new Guid("e14bf1ad-b7bf-4653-8b7e-0509c232d0c3"), Value = "Yes" },
                        new { Id = new Guid("d43c0a9b-dd8b-41d9-810f-aa248ca11e87"), FeatureTypeId = new Guid("e14bf1ad-b7bf-4653-8b7e-0509c232d0c3"), Value = "No" },
                        new { Id = new Guid("a74c3ad6-3012-4fde-a650-f67b9ecb498e"), FeatureTypeId = new Guid("a9d30db7-e8c7-48b1-b149-dba67782dd2e"), Value = "Yes" },
                        new { Id = new Guid("857479ea-c444-40b3-a447-c24ec0e81f85"), FeatureTypeId = new Guid("a9d30db7-e8c7-48b1-b149-dba67782dd2e"), Value = "No" },
                        new { Id = new Guid("7cd2a5a8-7d22-4b2a-a626-82a66dff76b5"), FeatureTypeId = new Guid("20f5fab2-aa06-417a-b230-d3785796a14e"), Value = "Balcony" },
                        new { Id = new Guid("301a2c24-0743-4814-ab71-a3f2517714a2"), FeatureTypeId = new Guid("20f5fab2-aa06-417a-b230-d3785796a14e"), Value = "Patio" },
                        new { Id = new Guid("2dbb6c1c-6130-4c6d-96c0-26b398b4c0aa"), FeatureTypeId = new Guid("20f5fab2-aa06-417a-b230-d3785796a14e"), Value = "Deck" },
                        new { Id = new Guid("d28d9fae-f6b1-4761-a11e-6b7892a572a9"), FeatureTypeId = new Guid("8a3e1810-87fc-4805-946f-257a77a42613"), Value = "Yes" },
                        new { Id = new Guid("1d8bb83d-e8f2-4937-92d1-9eb027369f60"), FeatureTypeId = new Guid("8a3e1810-87fc-4805-946f-257a77a42613"), Value = "No" },
                        new { Id = new Guid("b108a14d-3682-479f-91a5-a2cd50604311"), FeatureTypeId = new Guid("afcfa488-061a-4484-a68d-150db781a708"), Value = "Yes" },
                        new { Id = new Guid("a57f45a6-2036-4c4e-baf5-e8c4facdb53c"), FeatureTypeId = new Guid("afcfa488-061a-4484-a68d-150db781a708"), Value = "No" },
                        new { Id = new Guid("9194ea57-a7a6-45eb-9722-99dbc47cb94c"), FeatureTypeId = new Guid("5f4551f6-fa56-4550-8096-f1f8c788972d"), Value = "Yes" },
                        new { Id = new Guid("d755fb46-1552-4fc8-804b-20fbe629dbb1"), FeatureTypeId = new Guid("5f4551f6-fa56-4550-8096-f1f8c788972d"), Value = "No" },
                        new { Id = new Guid("4db802bc-e074-43f1-94a0-46cc4dd6bc0b"), FeatureTypeId = new Guid("be25eca9-4382-4ab8-a0f0-012419003019"), Value = "Yes" },
                        new { Id = new Guid("b962c450-99c1-4506-b996-7b1d307fd980"), FeatureTypeId = new Guid("be25eca9-4382-4ab8-a0f0-012419003019"), Value = "No" },
                        new { Id = new Guid("af2c5cc0-b350-4330-8c1e-abe070af0a69"), FeatureTypeId = new Guid("3b61444f-cd13-4861-84d4-851af31f974e"), Value = "Yes" },
                        new { Id = new Guid("07ee36c9-3753-4b61-b867-b155e8dbed3b"), FeatureTypeId = new Guid("3b61444f-cd13-4861-84d4-851af31f974e"), Value = "No" },
                        new { Id = new Guid("46f3d151-749b-4314-bd64-9df951410e90"), FeatureTypeId = new Guid("5ff7133e-e962-4dd3-a51a-7d679978ffeb"), Value = "Some" },
                        new { Id = new Guid("10810f8c-85b5-4c6e-95b9-90951fc0ec68"), FeatureTypeId = new Guid("5ff7133e-e962-4dd3-a51a-7d679978ffeb"), Value = "All" },
                        new { Id = new Guid("49e5a9ca-e9b9-4d9a-a921-5385ff7772c9"), FeatureTypeId = new Guid("ed11f482-0264-462b-89c4-fb45ab975be8"), Value = "Yes" },
                        new { Id = new Guid("2e0f3513-b644-41d3-90e6-a591ddac09c6"), FeatureTypeId = new Guid("ed11f482-0264-462b-89c4-fb45ab975be8"), Value = "No" },
                        new { Id = new Guid("9ff9ffeb-3564-4608-9991-31be918f1868"), FeatureTypeId = new Guid("dc45a9b0-01ca-4f1d-a7ff-e2664f895f14"), Value = "Yes" },
                        new { Id = new Guid("b538f329-8369-4875-b045-7983edf23d3e"), FeatureTypeId = new Guid("dc45a9b0-01ca-4f1d-a7ff-e2664f895f14"), Value = "No" },
                        new { Id = new Guid("6ec608f2-d06c-4674-b816-21802bd5f484"), FeatureTypeId = new Guid("6d200ade-eba6-40e8-9d36-47da2b2aa3ba"), Value = "Yes" },
                        new { Id = new Guid("6a58670d-d485-4551-a5ac-85fdbe2547cb"), FeatureTypeId = new Guid("6d200ade-eba6-40e8-9d36-47da2b2aa3ba"), Value = "No" },
                        new { Id = new Guid("ce2a17bb-0a8b-4577-9fbc-90ada54046bf"), FeatureTypeId = new Guid("dc21e458-ef88-4fcb-9577-8a59933c6738"), Value = "Yes" },
                        new { Id = new Guid("4bd7f638-09ff-4306-a388-2ef5b376deb3"), FeatureTypeId = new Guid("dc21e458-ef88-4fcb-9577-8a59933c6738"), Value = "No" },
                        new { Id = new Guid("cc737e97-a195-4a25-9f35-3e420707b068"), FeatureTypeId = new Guid("8f1e2784-00ee-4a1a-ba7e-aef0b4b6700c"), Value = "Yes" },
                        new { Id = new Guid("8568e846-b453-4522-a265-3fc736cf0418"), FeatureTypeId = new Guid("8f1e2784-00ee-4a1a-ba7e-aef0b4b6700c"), Value = "No" },
                        new { Id = new Guid("e7f6ca5d-674d-4b74-ab35-099e08e450ef"), FeatureTypeId = new Guid("84e3d7aa-e79f-4573-9a8b-61ad8a4d8cee"), Value = "Yes" },
                        new { Id = new Guid("39984b26-96cb-4fd8-9b2b-b098cf5e1abc"), FeatureTypeId = new Guid("84e3d7aa-e79f-4573-9a8b-61ad8a4d8cee"), Value = "No" },
                        new { Id = new Guid("071b7831-3565-481a-940f-5b950bd5084d"), FeatureTypeId = new Guid("1f2fd3aa-8428-42ee-935d-8a94562c1691"), Value = "Yes" },
                        new { Id = new Guid("aa21149d-546b-4f0e-87d1-596a601f9246"), FeatureTypeId = new Guid("1f2fd3aa-8428-42ee-935d-8a94562c1691"), Value = "No" },
                        new { Id = new Guid("6969e158-02af-4508-a282-5080c8bf9bb5"), FeatureTypeId = new Guid("78e83ea9-e7c5-48ee-a6cf-561e764c3b04"), Value = "Yes" },
                        new { Id = new Guid("8a3235e2-fceb-4528-9695-7b22f1c6f0c2"), FeatureTypeId = new Guid("78e83ea9-e7c5-48ee-a6cf-561e764c3b04"), Value = "No" },
                        new { Id = new Guid("5d3e4702-64a6-4e6b-9552-119adc76764c"), FeatureTypeId = new Guid("910a3bec-038a-41de-bf7e-1a6443723032"), Value = "Yes" },
                        new { Id = new Guid("22963d7d-e657-417b-8887-fcdc6f698940"), FeatureTypeId = new Guid("910a3bec-038a-41de-bf7e-1a6443723032"), Value = "No" },
                        new { Id = new Guid("7067c3f3-91da-4316-89d0-e8a2d4af66f6"), FeatureTypeId = new Guid("8e52d602-68c2-4412-8345-128a24c7a350"), Value = "Yes" },
                        new { Id = new Guid("a585a47f-33e4-411d-a357-84a227352111"), FeatureTypeId = new Guid("8e52d602-68c2-4412-8345-128a24c7a350"), Value = "No" },
                        new { Id = new Guid("954de9d2-108f-4d93-bba8-765d52d21c19"), FeatureTypeId = new Guid("d88b62d4-4c2d-4e0c-b087-2ee1765cdc69"), Value = "Yes" },
                        new { Id = new Guid("85c6662f-6d57-49e2-8130-70e4b4400ab3"), FeatureTypeId = new Guid("d88b62d4-4c2d-4e0c-b087-2ee1765cdc69"), Value = "No" },
                        new { Id = new Guid("b957d55c-52fc-4d1c-9688-c38f669edd4a"), FeatureTypeId = new Guid("77d0b2fc-9123-4d4b-a12d-9d99219f0dbd"), Value = "Yes" },
                        new { Id = new Guid("638b842b-906a-466c-b89a-f9330c0d53c8"), FeatureTypeId = new Guid("77d0b2fc-9123-4d4b-a12d-9d99219f0dbd"), Value = "No" },
                        new { Id = new Guid("b861f558-e502-425f-a8ae-af5be0d01ad6"), FeatureTypeId = new Guid("6a9057af-2ddb-48f9-954d-078665856f81"), Value = "Downtown" },
                        new { Id = new Guid("c22336ec-0f61-4577-b953-996f50c5074c"), FeatureTypeId = new Guid("6a9057af-2ddb-48f9-954d-078665856f81"), Value = "Uptown" },
                        new { Id = new Guid("5cd9c7f4-3425-4704-b814-e6a06e71cf10"), FeatureTypeId = new Guid("6a9057af-2ddb-48f9-954d-078665856f81"), Value = "Rural" },
                        new { Id = new Guid("241ae701-607d-4fc0-a1fb-3bf80be551ff"), FeatureTypeId = new Guid("6a9057af-2ddb-48f9-954d-078665856f81"), Value = "Suburban" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<Guid>("SearchRequestId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("FeatureRequests");
                });

            modelBuilder.Entity("FishResident.Models.FeatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");

                    b.HasData(
                        new { Id = new Guid("1c565db5-243f-4bdb-af62-e7296f013b17"), Name = "Number of Bedrooms" },
                        new { Id = new Guid("3729f5f7-ef17-41e4-8777-f093531fcb3d"), Name = "Number of Bathrooms" },
                        new { Id = new Guid("ace127e3-2f34-4d40-abc1-703b485f1e36"), Name = "Kitchen size" },
                        new { Id = new Guid("db7ebcab-eec7-4016-bc1b-94280113679f"), Name = "Garage" },
                        new { Id = new Guid("b1ced21f-641d-4e09-b2ef-705130e4729a"), Name = "Number of Auto Spaces" },
                        new { Id = new Guid("e14bf1ad-b7bf-4653-8b7e-0509c232d0c3"), Name = "Pets Allowed" },
                        new { Id = new Guid("a9d30db7-e8c7-48b1-b149-dba67782dd2e"), Name = "Air Conditioning" },
                        new { Id = new Guid("20f5fab2-aa06-417a-b230-d3785796a14e"), Name = "Balcony Type" },
                        new { Id = new Guid("8a3e1810-87fc-4805-946f-257a77a42613"), Name = "Cable Ready" },
                        new { Id = new Guid("afcfa488-061a-4484-a68d-150db781a708"), Name = "Dishwasher" },
                        new { Id = new Guid("5f4551f6-fa56-4550-8096-f1f8c788972d"), Name = "Microwave Included" },
                        new { Id = new Guid("be25eca9-4382-4ab8-a0f0-012419003019"), Name = "Handicap Accessible" },
                        new { Id = new Guid("3b61444f-cd13-4861-84d4-851af31f974e"), Name = "Hardwood Floors" },
                        new { Id = new Guid("5ff7133e-e962-4dd3-a51a-7d679978ffeb"), Name = "Utilities Covered" },
                        new { Id = new Guid("ed11f482-0264-462b-89c4-fb45ab975be8"), Name = "Walk-In Closets" },
                        new { Id = new Guid("dc45a9b0-01ca-4f1d-a7ff-e2664f895f14"), Name = "Washer/Dryer Included" },
                        new { Id = new Guid("6d200ade-eba6-40e8-9d36-47da2b2aa3ba"), Name = "Security System" },
                        new { Id = new Guid("dc21e458-ef88-4fcb-9577-8a59933c6738"), Name = "Limited/Controlled Access" },
                        new { Id = new Guid("8f1e2784-00ee-4a1a-ba7e-aef0b4b6700c"), Name = "Elevator" },
                        new { Id = new Guid("84e3d7aa-e79f-4573-9a8b-61ad8a4d8cee"), Name = "Extra Storage" },
                        new { Id = new Guid("1f2fd3aa-8428-42ee-935d-8a94562c1691"), Name = "Fitness Center Nearby" },
                        new { Id = new Guid("78e83ea9-e7c5-48ee-a6cf-561e764c3b04"), Name = "Business Center Nearby" },
                        new { Id = new Guid("910a3bec-038a-41de-bf7e-1a6443723032"), Name = "Laundry Facility Nearby" },
                        new { Id = new Guid("8e52d602-68c2-4412-8345-128a24c7a350"), Name = "Pool Nearby" },
                        new { Id = new Guid("d88b62d4-4c2d-4e0c-b087-2ee1765cdc69"), Name = "Park Nearby" },
                        new { Id = new Guid("77d0b2fc-9123-4d4b-a12d-9d99219f0dbd"), Name = "Senior Living" },
                        new { Id = new Guid("6a9057af-2ddb-48f9-954d-078665856f81"), Name = "Neighbourhood Type" }
                    );
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FeatureId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<double>("Area");

                    b.Property<double>("Cost");

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<Guid?>("SearchRequestId");

                    b.Property<Guid>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SearchRequestId");

                    b.HasIndex("TypeId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.Property<Guid>("ResidenceId");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.ToTable("ResidencePhotos");
                });

            modelBuilder.Entity("FishResident.Models.ResidenceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ResidenceTypes");
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SearchRequests");
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<string>("SubscriberId")
                        .IsRequired();

                    b.Property<string>("TimePeriod");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SubscriberId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FishResident.Models.Agreement", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("AgreementsOwner")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("Agreements")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser", "Resident")
                        .WithMany("AgreementsResident")
                        .HasForeignKey("ResidentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Feature", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeId");

                    b.HasOne("FishResident.Models.Feature", "LinkedFeature")
                        .WithMany()
                        .HasForeignKey("LinkedFeatureId");
                });

            modelBuilder.Entity("FishResident.Models.FeatureAllowedValue", b =>
                {
                    b.HasOne("FishResident.Models.FeatureType", "FeatureType")
                        .WithMany("AllowedValues")
                        .HasForeignKey("FeatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureRequest", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest", "SearchRequest")
                        .WithMany("FeatureRequests")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.FeatureValue", b =>
                {
                    b.HasOne("FishResident.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Residence", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Owner")
                        .WithMany("Residences")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.SearchRequest")
                        .WithMany("Results")
                        .HasForeignKey("SearchRequestId");

                    b.HasOne("FishResident.Models.ResidenceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.ResidencePhoto", b =>
                {
                    b.HasOne("FishResident.Models.Residence", "Residence")
                        .WithMany("ResidencePhotos")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.SearchRequest", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "User")
                        .WithMany("SearchRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FishResident.Models.Subscription", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser", "Subscriber")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FishResident.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
